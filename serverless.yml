service: etl-ocr

provider:
  name: aws
  region: ${self:custom.region}
  stage: ${self:custom.stageName}
  environment:
    ENV: ${self:custom.stageName}
    REGION: ${self:custom.region}
  stackTags:
    application: ${self:service}
    application-family: etl
    environment: ${self:custom.stageName}
  ecr:
    images:
      extract-votes-numbers-from-image:
        path: ./lambda/ExtractVotesNumbersFromImage

plugins:
  - serverless-step-functions
  - serverless-iam-roles-per-function
  - serverless-dotenv-plugin
  - serverless-python-requirements
  - serverless-prune-plugin

package:
  individually: true
  exclude:
    - node_modules/**
    - "package.json"
    - "package-lock.json"
    - venv/**
  include:
    - ../lambda/**

custom:
  stageName: ${opt:stage, 'dev'}
  region: us-east-2
  mainStateMachineName: ${self:service}-${self:custom.stageName}
  retryMaxAttempts: 36
  retryIntervalSeconds: 300
  retryBackoffRate: 1
  lambdaTimeout: 60
  lambdaMemory: 128
  prune:
    automatic: true
    number: 3

functions:
  ProcessId:
    runtime: nodejs18.x
    handler: lambda/ProcessId/main.handler
    timeout: ${self:custom.lambdaTimeout}
    memorySize: ${self:custom.lambdaMemory}
    iamRoleStatementsName: ${self:service}-${self:custom.stageName}-ProcessId
  GetResultsFromApi:
    runtime: nodejs18.x
    handler: lambda/GetResultsFromApi/main.handler
    timeout: ${self:custom.lambdaTimeout}
    memorySize: ${self:custom.lambdaMemory}
    iamRoleStatementsName: ${self:service}-${self:custom.stageName}-GetResultsFromApi
  QueryFiscalPayload:
    runtime: nodejs18.x
    handler: lambda/QueryFiscalPayload/main.handler
    timeout: ${self:custom.lambdaTimeout}
    memorySize: ${self:custom.lambdaMemory}
    iamRoleStatementsName: ${self:service}-${self:custom.stageName}-QueryFiscalPayload
  SaveRecordToDatabase:
    runtime: nodejs18.x
    handler: lambda/SaveRecordToDatabase/main.handler
    timeout: ${self:custom.lambdaTimeout}
    memorySize: ${self:custom.lambdaMemory}
    iamRoleStatementsName: ${self:service}-${self:custom.stageName}-SaveRecordToDatabase
  SaveImageToS3:
    runtime: nodejs18.x
    handler: lambda/SaveImageToS3/main.handler
    timeout: ${self:custom.lambdaTimeout}
    memorySize: ${self:custom.lambdaMemory}
    iamRoleStatementsName: ${self:service}-${self:custom.stageName}-SaveImageToS3
  ExtractVotesNumbersFromImage:
    image:
      name: extract-votes-numbers-from-image
    timeout: ${self:custom.lambdaTimeout}
    memorySize: ${self:custom.lambdaMemory}
    iamRoleStatementsName: ${self:service}-${self:custom.stageName}-ExtractVotesNumbersFromImage
    architecture: arm64
  ProcessImageOCR:
    runtime: nodejs18.x
    handler: lambda/ProcessImageOCR/main.handler
    timeout: ${self:custom.lambdaTimeout}
    memorySize: ${self:custom.lambdaMemory}
    iamRoleStatementsName: ${self:service}-${self:custom.stageName}-ProcessImageOCR
  DetectTextAwsTextract:
    runtime: nodejs18.x
    handler: lambda/DetectTextAwsTextract/main.handler
    timeout: ${self:custom.lambdaTimeout}
    memorySize: ${self:custom.lambdaMemory}
    iamRoleStatementsName: ${self:service}-${self:custom.stageName}-DetectTextAwsTextract

stepFunctions:
  stateMachines:
    etl-ocr:
      name: ${self:custom.mainStateMachineName}
      definition:
        Comment: This State Machine process images.
        StartAt: ProcessId
        States:
          ProcessId:
            Comment: Procesa y marca como procesado un id desde SQS (FIFO)
            Type: Task
            Resource: !GetAtt ProcessId.Arn
            TimeoutSeconds: ${self:functions.ProcessId.timeout}
            ResultPath: $.id
            Next: GetResultsFromApi
          GetResultsFromApi:
            Comment: Realiza un GET request hacia el api de resultados para obtener los resultados provisorios
            Type: Task
            Resource: !GetAtt GetResultsFromApi.Arn
            TimeoutSeconds: ${self:functions.GetResultsFromApi.timeout}
            ResultPath: $.govermentData
            Next: QueryFiscalPayload
          QueryFiscalPayload:
            Comment: Realiza una consulta a DAX (dynamodb) para cargar en memoria la data enviada por el fiscal para la mesa que esta siendo procesada
            Type: Task
            Resource: !GetAtt QueryFiscalPayload.Arn
            TimeoutSeconds: ${self:functions.QueryFiscalPayload.timeout}
            ResultPath: $.fiscalData
            Next: DoWeHaveFiscalData
          DoWeHaveFiscalData:
            Comment: ¿Tenemos data del fiscal recibida?
            Type: Choice
            Choices:
              - Variable: $.fiscalData.isAvailable
                BooleanEquals: true
                Next: IsFiscalDataEqualsToGovermentApiData
              - Variable: $.fiscalData.isAvailable
                BooleanEquals: false
                Next: IsFiscalDataEqualsToGovermentApiData
          IsFiscalDataEqualsToGovermentApiData:
            Comment: ¿Es la data que cargo el fiscal igual a la cargada en API resultados?
            Type: Choice
            Choices:
              - And:
                  - Variable: $.fiscalData.conteoLla
                    NumericEqualsPath: $.govermentData.resultados.lla.votos
                  - Variable: $.fiscalData.conteoUp
                    NumericEqualsPath: $.govermentData.resultados.up.votos
                Next: SaveRecordToDatabase
            Default: SaveImageToS3
          SaveImageToS3:
            Comment: Descarga la imagen desde los resultados provisorios y la guarda en S3
            Type: Task
            Resource: !GetAtt SaveImageToS3.Arn
            TimeoutSeconds: ${self:functions.SaveImageToS3.timeout}
            ResultPath: $.imagePath
            Next: ExtractVotesNumbersFromImage
          ExtractVotesNumbersFromImage:
            Comment: Extrae unicamente la tabla de numeros del telegrama para facilitar el procesamiento OCRs
            Type: Task
            Resource: !GetAtt ProcessImageOCR.Arn
            TimeoutSeconds: ${self:functions.ProcessImageOCR.timeout}
            ResultPath: $.imageExtracted
            Next: ProcessImageOCR
          ProcessImageOCR:
            Comment: Procesa la imagen con un OCR en el orden en que ha sido definidos por prioridad
            Type: Task
            Resource: !GetAtt ProcessImageOCR.Arn
            TimeoutSeconds: ${self:functions.ProcessImageOCR.timeout}
            Next: WereAllFieldsDetected
          WereAllFieldsDetected:
            Comment: ¿Se detectaron todos los campos del telegrama?
            Type: Choice
            Choices:
              - And:
                  - Variable: $.fiscalData.conteoLla
                    NumericEqualsPath: $.govermentData.resultados.lla.votos
                  - Variable: $.fiscalData.conteoUp
                    NumericEqualsPath: $.govermentData.resultados.up.votos
                Next: IsGovermentOcrEqualsToGovermentAPI
            Default: DoWeHaveMoreOCRAvailable
          DoWeHaveMoreOCRAvailable:
            Comment: ¿Tenemos algun otro OCR disponible?
            Type: Choice
            Choices:
              - And:
                  - Variable: $.fiscalData.conteoLla
                    NumericEqualsPath: $.govermentData.resultados.lla.votos
                  - Variable: $.fiscalData.conteoUp
                    NumericEqualsPath: $.govermentData.resultados.up.votos
                Next: ProcessImageOCR
            Default: SaveRecordToDatabase
          IsGovermentOcrEqualsToGovermentAPI:
            Comment: ¿Los datos extraidos del telegrama (gob) es igual a los datos publicados en resultados?
            Type: Choice
            Choices:
              - And:
                  - Variable: $.fiscalData.conteoLla
                    NumericEqualsPath: $.govermentData.resultados.lla.votos
                  - Variable: $.fiscalData.conteoUp
                    NumericEqualsPath: $.govermentData.resultados.up.votos
                Next: DoWeHaveFiscalData2
            # Fraude (incongruencia en datos escaneados vs. publicados)
            Default: SaveRecordToDatabase
          DoWeHaveFiscalData2:
            Comment: ¿Tenemos data del fiscal recibida (2)?
            Type: Choice
            Choices:
              - Variable: $.fiscalData.isAvailable
                BooleanEquals: true
                # posible falla en datos ingresados por fiscal (america verificacion manual)
                Next: SaveRecordToDatabase
              - Variable: $.fiscalData.isAvailable
                BooleanEquals: false
                # No tenemos forma de validar la incongruencia
                Next: SaveRecordToDatabase
          SaveRecordToDatabase:
            Comment: Guarda el resultado final del procesamiento de la mesa en db
            Type: Task
            Resource: !GetAtt SaveRecordToDatabase.Arn
            TimeoutSeconds: ${self:functions.SaveRecordToDatabase.timeout}
            Next: Succeed
          # DetectTextAwsTextract:
          #   Comment: Hace uso de AWS Textract OCR para extraer los datos desde una imagen de telegrama
          #   Type: Task
          #   Resource: !GetAtt DetectTextAwsTextract.Arn
          #   TimeoutSeconds: ${self:functions.DetectTextAwsTextract.timeout}
          #   OutputPath: $.dataFromAwsTextract
          #   Next: Succeed
          Succeed:
            Type: Succeed
